<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

       <bean id="helloWorld" class="entity.beans.HelloWorld">
              <property name="name" value="jidongyuan"></property>
       </bean>

       <!--通过构造方法来配置bean的属性-->
       <bean id="car1" class="entity.beans.Car">
              <constructor-arg value="audi" index="0"></constructor-arg>
              <constructor-arg value="ShangHai" index="1"></constructor-arg>
              <constructor-arg value="300000" type="int"></constructor-arg>
       </bean>

       <bean id="car2" class="entity.beans.Car">
              <constructor-arg value="baoma"></constructor-arg>
              <!--如果包含特殊字符，可以用<![CDATA[]]>包裹起来-->
              <!--属性值可以通过value直接点进行配置-->
              <constructor-arg>
                     <value><![CDATA[<ShangHai>]]></value>
              </constructor-arg>
              <!--<constructor-arg value="240" type="double"></constructor-arg>-->
              <constructor-arg type="double">
                     <value>250</value>
              </constructor-arg>
       </bean>

       <bean id="person" class="entity.beans.Person">
              <property name="name" value="Tom"></property>
              <property name="age" value="24"></property>
              <!--可以使用property的ref属性建立bean之间的引用关系-->
              <!--<property name="car" ref="car2"></property>-->
              <!--使用ref元素建立bean之间的引用关系-->
              <!--<property name="car">
                    <ref bean="car2" />
              </property>-->
              <!--内部bean不能被外部引用，只能在内部使用-->
              <property name="car">
                     <bean class="entity.beans.Car">
                            <constructor-arg value="ford"></constructor-arg>
                            <constructor-arg value="Changan"></constructor-arg>
                            <constructor-arg value="200000" type="double"></constructor-arg>
                     </bean>
              </property>
       </bean>

       <bean id="person2" class="entity.beans.Person">
              <constructor-arg value="Jerry"></constructor-arg>
              <constructor-arg value="25"></constructor-arg>
              <!--<constructor-arg ref="car2"></constructor-arg>-->
              <!--测试赋值null值-->
              <!--<constructor-arg><null/></constructor-arg>-->
              <constructor-arg ref="car2"></constructor-arg>
              <!--为级联属性赋值,注意属性要先初始化才能为级联属性赋值，否则会报错，和structs2不同-->
              <property name="car.maxSpeed" value="250"></property>
       </bean>

       <!--测试如何配置集合属性-->
       <bean id="person3" class="entity.collections.Person">
              <property name="name" value="Mike"></property>
              <property name="age" value="27"></property>
              <property name="cars">
                     <list>
                            <ref bean="car1"/>
                            <ref bean="car2"/>
                     </list>
              </property>
       </bean>

       <!--配置Map属性值-->
       <bean id="newPerson" class="entity.collections.NewPerson">
              <property name="name" value="Rose"></property>
              <property name="age" value="28"></property>
              <property name="cars">
                     <!--使用map节点以及map的entry子节点来配置Map类型的成员变量-->
                     <map>
                            <entry key="AA" value-ref="car1"></entry>
                            <entry key="BB" value-ref="car2"></entry>
                     </map>
              </property>
       </bean>

       <!--配置propeties属性值-->
       <!--<bean id="dataSource" class="entity.collections.DataSource">
              <property name="properties">
                     &lt;!&ndash;使用props和prop子节点来为Properties属性赋值&ndash;&gt;
                     <props>
                            <prop key="user">root</prop>
                            <prop key="password">1234</prop>
                            <prop key="jdbcUrl">jdbc:mysql:///test</prop>
                            <prop key="driverClass">com.mysql.jdbc.Driver</prop>
                     </props>
              </property>
       </bean>-->

       <!--配置单例的集合bean以供多个bean引用，需要导入util命名空间-->
       <util:list id="cars">
              <ref bean="car1" />
              <ref bean="car2"/>
       </util:list>

       <bean id="person4" class="entity.collections.Person">
              <property name="name" value="Jack"></property>
              <property name="age" value="29"></property>
              <property name="cars" ref="cars"></property>
       </bean>

       <!--通过P命名空间为bean的属性赋值，需要先导入P命名空间-->
       <bean id="person5" class="entity.collections.Person" p:age="30" p:name="Queen" p:cars-ref="cars"></bean>



</beans>